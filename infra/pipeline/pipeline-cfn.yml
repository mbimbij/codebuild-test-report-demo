Parameters:
  ApplicationName:
    Type: String
    Description: Application Name
  GithubRepo:
    Type: String
    Description: Github source code repository
  GithubRepoBranch:
    Type: String
    Description: Github source code branch
  NetworkStagingStackName:
    Type: String
    Description: Networking Staging Stack Name
  NetworkProductionStackName:
    Type: String
    Description: Networking Production Stack Name
  StagingEnvironmentDns:
    Type: String
    Description: Staging Environment Dns
  ProductionEnvironmentDns:
    Type: String
    Description: Production Environment Dns

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Description: S3 bucket for pipeline artifacts
    Properties:
      BucketName: !Sub '${AWS::Region}-${AWS::AccountId}-${ApplicationName}-bucket-pipeline'
  GithubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: !Ref ApplicationName
      ProviderType: GitHub
  BuildProjectRole:
    Type: 'AWS::IAM::Role'
    Description: IAM role for !Ref ApplicationName build resource
    Properties:
      RoleName: !Sub '${ApplicationName}-build-role'
      Policies:
        - PolicyName: !Sub '${ApplicationName}-build-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource: !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ApplicationName}-*'
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
  PipelineRole:
    Type: 'AWS::IAM::Role'
    Description: IAM role for !Ref ApplicationName pipeline resource
    Properties:
      RoleName: !Sub '${ApplicationName}-pipeline-role'
      Policies:
        - PolicyName: !Sub '${ApplicationName}-pipeline-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref GithubConnection
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:PutObjectAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource:
                  - !GetAtt [BuildProject, Arn]
                  - !GetAtt StagingTest.Outputs.TestRunnerArn
                  - !GetAtt ProductionTest.Outputs.TestRunnerArn
              - Effect: Allow
                Action:
                  - codedeploy:*
                Resource: !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}*'
              - Effect: Allow
                Action:
                  - ec2:*
                Resource:
                  - "*"
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${ApplicationName}-build-project'
      Description: A build project for !Ref ApplicationName
      ServiceRole: !Ref BuildProjectRole
      Artifacts:
        Type: CODEPIPELINE
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      Cache:
        Type: S3
        Location: !Sub '${S3Bucket}/maven-cache'
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                java: corretto11
            build:
              commands:
                - mvn verify
            post_build:
              commands:
                # move the jar (by wildcard, agnostic to its name) to top level application.jar
                - mv target/*.jar application.jar
              finally:
                - find target/surefire-reports/ -name "*Cucumber*" -delete
                - find target/failsafe-reports/ -name "*Cucumber*" -delete
          reports:
            BuildTimeTests:
              files:
                - 'target/surefire-reports/TEST*.xml'
                - 'target/failsafe-reports/TEST*.xml'
                - 'target/cucumber-reports/buildtime/cucumber-results.xml'
                - 'target/cucumber-reports/buildtime/cucumber-integration-results.xml'
            CoverageReport:
              files:
                - 'target/site/jacoco-aggregate/jacoco.xml'
              file-format: 'JACOCOXML'
          cache:
            paths:
              - '/root/.m2/**/*'
          artifacts:
            files:
              - application.jar
              - appspec.yml
              - 'scripts/*'
              - application.service
  CodeDeployRole:
    Type: 'AWS::IAM::Role'
    Description: IAM role for !Ref ApplicationName code deploy deployment group
    Properties:
      RoleName: !Sub '${ApplicationName}-deploy-role'
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${ApplicationName}-deploy-application'
      ComputePlatform: Server
  StagingDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt
        - CodeDeployRole
        - Arn
      DeploymentGroupName: !Sub '${ApplicationName}-staging-deployment-group'
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagSet:
        Ec2TagSetList:
          - Ec2TagGroup:
            - Key: Application
              Value: !Ref ApplicationName
              Type: KEY_AND_VALUE
          - Ec2TagGroup:
            - Key: Environment
              Value: staging
              Type: KEY_AND_VALUE
  ProductionDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt
        - CodeDeployRole
        - Arn
      DeploymentGroupName: !Sub '${ApplicationName}-production-deployment-group'
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagSet:
        Ec2TagSetList:
          - Ec2TagGroup:
            - Key: Application
              Value: !Ref ApplicationName
              Type: KEY_AND_VALUE
          - Ec2TagGroup:
            - Key: Environment
              Value: production
              Type: KEY_AND_VALUE
  StagingTest:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: 'integration-test-runner/integration-test-runner.yml'
      Parameters:
        ApplicationName:
          Ref: ApplicationName
        VPCID:
          Fn::ImportValue: !Sub '${NetworkStagingStackName}::VPC'
        Environment: staging
        SubnetID:
          Fn::ImportValue: !Sub '${NetworkStagingStackName}::PrivateSubnet1'
        S3Bucket:
          Ref: S3Bucket
        ApplicationEndpointDnsName:
          Ref: StagingEnvironmentDns
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}::StagingTestRunner'
  ProductionTest:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: 'integration-test-runner/integration-test-runner.yml'
      Parameters:
        ApplicationName:
          Ref: ApplicationName
        VPCID:
          Fn::ImportValue: !Sub '${NetworkProductionStackName}::VPC'
        Environment: production
        SubnetID:
          Fn::ImportValue: !Sub '${NetworkProductionStackName}::PrivateSubnet1'
        S3Bucket:
          Ref: S3Bucket
        ApplicationEndpointDnsName:
          Ref: ProductionEnvironmentDns
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}::ProductionTestRunner'
  Pipeline:
    Description: Creating a deployment pipeline for !Ref ApplicationName project in AWS CodePipeline
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt
        - PipelineRole
        - Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GithubConnection
                FullRepositoryId: !Ref GithubRepo
                BranchName: !Ref GithubRepoBranch
                OutputArtifactFormat: "CODE_ZIP"
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName:
                  Ref: BuildProject
        - Name: Staging
          Actions:
            - Name: Deploy
              RunOrder: 1
              InputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName:
                  Ref: CodeDeployApplication
                DeploymentGroupName:
                  Ref: StagingDeploymentGroup
            - Name: Test
              RunOrder: 2
              InputArtifacts:
                  - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !GetAtt StagingTest.Outputs.TestRunnerName
        - Name: Production
          Actions:
            - Name: ApproveDeployProd
              RunOrder: 1
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                CustomData: "Perform all necessary manual tests and verifications on \"staging\" environment before approving."
            - Name: Deploy
              RunOrder: 2
              InputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName:
                  Ref: CodeDeployApplication
                DeploymentGroupName:
                  Ref: ProductionDeploymentGroup
            - Name: Test
              RunOrder: 3
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !GetAtt ProductionTest.Outputs.TestRunnerName